/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/carrt/ros-hydro/carrt_ws/src/collab/msg/ObjectProperties.msg
 *
 */


#ifndef COLLAB_MESSAGE_OBJECTPROPERTIES_H
#define COLLAB_MESSAGE_OBJECTPROPERTIES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace collab
{
template <class ContainerAllocator>
struct ObjectProperties_
{
  typedef ObjectProperties_<ContainerAllocator> Type;

  ObjectProperties_()
    : objectName()
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , px(0.0)
    , py(0.0)
    , pz(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)  {
    }
  ObjectProperties_(const ContainerAllocator& _alloc)
    : objectName(_alloc)
    , a1(0.0)
    , a2(0.0)
    , a3(0.0)
    , px(0.0)
    , py(0.0)
    , pz(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _objectName_type;
  _objectName_type objectName;

   typedef double _a1_type;
  _a1_type a1;

   typedef double _a2_type;
  _a2_type a2;

   typedef double _a3_type;
  _a3_type a3;

   typedef double _px_type;
  _px_type px;

   typedef double _py_type;
  _py_type py;

   typedef double _pz_type;
  _pz_type pz;

   typedef double _phi_type;
  _phi_type phi;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _psi_type;
  _psi_type psi;




  typedef boost::shared_ptr< ::collab::ObjectProperties_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collab::ObjectProperties_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct ObjectProperties_

typedef ::collab::ObjectProperties_<std::allocator<void> > ObjectProperties;

typedef boost::shared_ptr< ::collab::ObjectProperties > ObjectPropertiesPtr;
typedef boost::shared_ptr< ::collab::ObjectProperties const> ObjectPropertiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::collab::ObjectProperties_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::collab::ObjectProperties_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace collab

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'collab': ['/home/carrt/ros-hydro/carrt_ws/src/collab/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::collab::ObjectProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collab::ObjectProperties_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collab::ObjectProperties_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collab::ObjectProperties_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collab::ObjectProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collab::ObjectProperties_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::collab::ObjectProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdabbe42e8510ce5f25f3efef61dbb5e";
  }

  static const char* value(const ::collab::ObjectProperties_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdabbe42e8510ce5ULL;
  static const uint64_t static_value2 = 0xf25f3efef61dbb5eULL;
};

template<class ContainerAllocator>
struct DataType< ::collab::ObjectProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "collab/ObjectProperties";
  }

  static const char* value(const ::collab::ObjectProperties_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::collab::ObjectProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# (c) K. Duncan, 2015\n\
# Represents an object in terms of its associated superquadric parameters\n\
# and the object's category identity.\n\
\n\
############\n\
# Identity #\n\
############\n\
string objectName\n\
\n\
\n\
########################\n\
# Geometric Properties #\n\
########################\n\
# The shape dimension for the x-axis\n\
float64 a1\n\
\n\
# The shape dimension for the y-axis\n\
float64 a2\n\
\n\
# The shape dimension for the z-axis\n\
float64 a3\n\
\n\
# The x-axis location of the centroid of this superquadric\n\
float64 px\n\
\n\
# The y-axis location of the centroid of this superquadric\n\
float64 py\n\
\n\
# The z-axis location of the centroid of this superquadric\n\
float64 pz\n\
\n\
# Euler rotation angle along the x-axis\n\
float64 phi\n\
\n\
# Euler rotation angle along the y-axis\n\
float64 theta\n\
\n\
# Euler rotation angle along the x-axis\n\
float64 psi\n\
";
  }

  static const char* value(const ::collab::ObjectProperties_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::collab::ObjectProperties_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objectName);
      stream.next(m.a1);
      stream.next(m.a2);
      stream.next(m.a3);
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.pz);
      stream.next(m.phi);
      stream.next(m.theta);
      stream.next(m.psi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ObjectProperties_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::collab::ObjectProperties_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::collab::ObjectProperties_<ContainerAllocator>& v)
  {
    s << indent << "objectName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.objectName);
    s << indent << "a1: ";
    Printer<double>::stream(s, indent + "  ", v.a1);
    s << indent << "a2: ";
    Printer<double>::stream(s, indent + "  ", v.a2);
    s << indent << "a3: ";
    Printer<double>::stream(s, indent + "  ", v.a3);
    s << indent << "px: ";
    Printer<double>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<double>::stream(s, indent + "  ", v.py);
    s << indent << "pz: ";
    Printer<double>::stream(s, indent + "  ", v.pz);
    s << indent << "phi: ";
    Printer<double>::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLLAB_MESSAGE_OBJECTPROPERTIES_H
