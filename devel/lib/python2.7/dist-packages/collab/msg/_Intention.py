"""autogenerated by genpy from collab/Intention.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import collab.msg

class Intention(genpy.Message):
  _md5sum = "8b7253dcc2556d1a8f3e26a7e2fc6350"
  _type = "collab/Intention"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """######################
# Object-Action Pair #
######################
string objectName
string actionName

#####################
# Object Properties #
#####################
ObjectProperties objectProperties

================================================================================
MSG: collab/ObjectProperties
# (c) K. Duncan, 2015
# Represents an object in terms of its associated superquadric parameters
# and the object's category identity.

############
# Identity #
############
string objectName


########################
# Geometric Properties #
########################
# The shape dimension for the x-axis
float64 a1

# The shape dimension for the y-axis
float64 a2

# The shape dimension for the z-axis
float64 a3

# The x-axis location of the centroid of this superquadric
float64 px

# The y-axis location of the centroid of this superquadric
float64 py

# The z-axis location of the centroid of this superquadric
float64 pz

# Euler rotation angle along the x-axis
float64 phi

# Euler rotation angle along the y-axis
float64 theta

# Euler rotation angle along the x-axis
float64 psi
"""
  __slots__ = ['objectName','actionName','objectProperties']
  _slot_types = ['string','string','collab/ObjectProperties']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objectName,actionName,objectProperties

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Intention, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objectName is None:
        self.objectName = ''
      if self.actionName is None:
        self.actionName = ''
      if self.objectProperties is None:
        self.objectProperties = collab.msg.ObjectProperties()
    else:
      self.objectName = ''
      self.actionName = ''
      self.objectProperties = collab.msg.ObjectProperties()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.objectName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.actionName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.objectProperties.objectName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.objectProperties.a1, _x.objectProperties.a2, _x.objectProperties.a3, _x.objectProperties.px, _x.objectProperties.py, _x.objectProperties.pz, _x.objectProperties.phi, _x.objectProperties.theta, _x.objectProperties.psi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.objectProperties is None:
        self.objectProperties = collab.msg.ObjectProperties()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.objectName = str[start:end].decode('utf-8')
      else:
        self.objectName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actionName = str[start:end].decode('utf-8')
      else:
        self.actionName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.objectProperties.objectName = str[start:end].decode('utf-8')
      else:
        self.objectProperties.objectName = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.objectProperties.a1, _x.objectProperties.a2, _x.objectProperties.a3, _x.objectProperties.px, _x.objectProperties.py, _x.objectProperties.pz, _x.objectProperties.phi, _x.objectProperties.theta, _x.objectProperties.psi,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.objectName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.actionName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.objectProperties.objectName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.objectProperties.a1, _x.objectProperties.a2, _x.objectProperties.a3, _x.objectProperties.px, _x.objectProperties.py, _x.objectProperties.pz, _x.objectProperties.phi, _x.objectProperties.theta, _x.objectProperties.psi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.objectProperties is None:
        self.objectProperties = collab.msg.ObjectProperties()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.objectName = str[start:end].decode('utf-8')
      else:
        self.objectName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actionName = str[start:end].decode('utf-8')
      else:
        self.actionName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.objectProperties.objectName = str[start:end].decode('utf-8')
      else:
        self.objectProperties.objectName = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.objectProperties.a1, _x.objectProperties.a2, _x.objectProperties.a3, _x.objectProperties.px, _x.objectProperties.py, _x.objectProperties.pz, _x.objectProperties.phi, _x.objectProperties.theta, _x.objectProperties.psi,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9d = struct.Struct("<9d")
