"""autogenerated by genpy from collab/SceneComposition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import collab.msg

class SceneComposition(genpy.Message):
  _md5sum = "fcfa93db164857c0fe4d73defd9c033c"
  _type = "collab/SceneComposition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """collab/ObjectProperties[] sceneComposition
================================================================================
MSG: collab/ObjectProperties
# (c) K. Duncan, 2015
# Represents an object in terms of its associated superquadric parameters
# and the object's category identity.

############
# Identity #
############
string objectName


########################
# Geometric Properties #
########################
# The shape dimension for the x-axis
float64 a1

# The shape dimension for the y-axis
float64 a2

# The shape dimension for the z-axis
float64 a3

# The x-axis location of the centroid of this superquadric
float64 px

# The y-axis location of the centroid of this superquadric
float64 py

# The z-axis location of the centroid of this superquadric
float64 pz

# Euler rotation angle along the x-axis
float64 phi

# Euler rotation angle along the y-axis
float64 theta

# Euler rotation angle along the x-axis
float64 psi
"""
  __slots__ = ['sceneComposition']
  _slot_types = ['collab/ObjectProperties[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sceneComposition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SceneComposition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sceneComposition is None:
        self.sceneComposition = []
    else:
      self.sceneComposition = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.sceneComposition)
      buff.write(_struct_I.pack(length))
      for val1 in self.sceneComposition:
        _x = val1.objectName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_9d.pack(_x.a1, _x.a2, _x.a3, _x.px, _x.py, _x.pz, _x.phi, _x.theta, _x.psi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.sceneComposition is None:
        self.sceneComposition = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sceneComposition = []
      for i in range(0, length):
        val1 = collab.msg.ObjectProperties()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.objectName = str[start:end].decode('utf-8')
        else:
          val1.objectName = str[start:end]
        _x = val1
        start = end
        end += 72
        (_x.a1, _x.a2, _x.a3, _x.px, _x.py, _x.pz, _x.phi, _x.theta, _x.psi,) = _struct_9d.unpack(str[start:end])
        self.sceneComposition.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.sceneComposition)
      buff.write(_struct_I.pack(length))
      for val1 in self.sceneComposition:
        _x = val1.objectName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_9d.pack(_x.a1, _x.a2, _x.a3, _x.px, _x.py, _x.pz, _x.phi, _x.theta, _x.psi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.sceneComposition is None:
        self.sceneComposition = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sceneComposition = []
      for i in range(0, length):
        val1 = collab.msg.ObjectProperties()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.objectName = str[start:end].decode('utf-8')
        else:
          val1.objectName = str[start:end]
        _x = val1
        start = end
        end += 72
        (_x.a1, _x.a2, _x.a3, _x.px, _x.py, _x.pz, _x.phi, _x.theta, _x.psi,) = _struct_9d.unpack(str[start:end])
        self.sceneComposition.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9d = struct.Struct("<9d")
